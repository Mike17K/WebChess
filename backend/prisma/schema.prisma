// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  // login fields
  username     String  @unique
  password     String
  salt         String?

  aud     String? @default(uuid())
  authProvider String?

  // profile fields
  profile    Profile?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  
  role      Role      @default(USER)

  friends  User[] @relation("Friends")
  friendOf User[] @relation("Friends")

  completedTactics Tactic[]
  accessTokens Token[]
  gamesPlayedAsWhite ChessGame[] @relation("PlayerWhite")
  gamesPlayedAsBlack ChessGame[] @relation("PlayerBlack")
}

model Profile {
  id String @id @default(uuid())

  profilename    String  @unique
  email    String?  @unique
  picture String?
  bio     String?

  score Int @default(0)
  rating Int @default(0)

  user User @relation(fields: [userid], references: [id])
  userid String @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Token{
  id String  @id @default(uuid())
  token String
  created DateTime  @default(now())
  expired DateTime

  userid String
  belongsTo User @relation(fields: [userid], references: [id])
}

enum Role {
  USER
  ADMIN
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  tactics Tactic[]
}

model Tactic {
  id            String @id @default(uuid())
  title         String
  titleCategory String
  fen           String
  hints         String
  tacticInfo    String
  solution      String
  comments      String

  endpoint String @default(dbgenerated("(concat('/api/tactic/id/', id))")) @map("endpoint")

  category Category @relation(fields: [titleCategory], references: [name])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  completedBy User[]
}

model ChessGame {
  id       String     @id @default(uuid())
  playerWhiteId String?
  playerWhite  User?       @relation("PlayerWhite", fields: [playerWhiteId], references: [id])
  playerBlackId String?
  playerBlack  User?      @relation("PlayerBlack", fields: [playerBlackId], references: [id])

whitePlayerTime Int
blackPlayerTime Int

  visibility Visibility @default(public)

  status    String
  result    String?
  
  pgn       String?
  fen       String @default("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1")

  metadata  Json?
  
  startTime DateTime
  endTime   DateTime?

  accessKey String // used to access the game for interactive spectators and players
  // if the user has the accessKey if the user id is playerWhiteId or playerBlackId, the user is a player, otherwise is an interactive spectator 
  // else is a passive spectator
}

enum Visibility {
  public
  private
  friends
}